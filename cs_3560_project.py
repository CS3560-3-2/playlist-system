# -*- coding: utf-8 -*-
"""CS 3560 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XU82rU2cKDygnliFh_PdQhfFHIL63xVj
"""
import mysql.connector 
import os
import random
from api import getSong, playSong, ms_to_mins_secs

# Note: methods are not all compilable, *** is used to note the methods/use cases that need work

'''
mydb = mysql.connector.connect(
    host = "localhost",
    user = "root",
    password = "password",
    database = "playlist",
) 
cursor = mydb.cursor()
'''

class Song:
  def __init__(self, name, artist, duration, song_id): #genre used for recommendations
    self._song_id = song_id
    self._song_name = name
    self._song_artist = artist
    self._song_duration = duration
  
  @property
  def song_id(self):
    return self._song_id
  
  @property
  def song_name(self):
    return self._song_name
  
  @property
  def song_artist(self):
    return self._song_artist
  
  @property
  def song_duration(self):
    return ms_to_mins_secs(int(self._song_duration))
  
  def __str__(self):
    return self._song_name

  
class FriendRequest:
  def __init__(self, sender, recipient):
      self.sender = sender
      self.recipient = recipient

class Account:
  # Method to create an account ***
  def __init__(self, username, password):
    self._username = username
    self._password = password
    self._friend_list = []
    self._playlists = []

  # Sending a friend request ***
  def send_fr(username):
    if username: # If username exists in system
      # -> Send accept_fr to other 
      return None

  # Responding to a friend request ***
  def accept_fr():
    response = input("X has sent you a friend request: Would you like to accept or decline?")
    if (response == "Accept"):
      friendlist.append(username)
      return "You and user are now friends"
    else:
      return "You have declined the request"

  def getUsername(self):
    return self._username
  
  def getPassword(self):
    return self._password
  
# Create subclass of music playlist for an account
class MusicPlaylist:
  # Method to create a playlist ***
  def __init__(self, playlist_name):
    self._songs = []
    self._playlist_name = playlist_name
    self._length = 0
    self._duration = 0

  @property
  def songs(self):
    return self._songs

  @property
  def playlist_name(self):
    return self._playlist_name
    
  @playlist_name.setter
  def playlist_name(self, value):
    self._playlist_name = value

  @property
  def length(self):
    return self._length
    
  @length.setter
  def length(self, value):
    self._length = value

  @property
  def duration(self):
    return ms_to_mins_secs(self._duration)
    
  @duration.setter
  def playlist_name(self, value):
    self._duration = value

  def add_song(self, song):
    new_song = Song(song[1], song[2], song[3], song[0])
    self._songs.append(new_song)
    self._length = self._length + 1
    self._duration = self._duration + song[3]

  def search_song(self, name):
    search = getSong(name)
    return search

  def display_songs(self):
    for song in self.songs:
      print(song)

  #CONTINUE HERE ON 4/23
  # Play a song ***
  def play(song):
  # Insert media player to play a song
    return None

  # Pause a song ***
  def pause(song):
    # Insert media player to pause a song
    return None

  # Skip a song ***
  def skip(song):
    # Insert media player to skip a song
    return None

  # Shuffle playlist ***
  def shuffle(pl):
    random.shuffle(pl)

  # Automatically play the next song (temporal event) ***
  def play_next(pl):
    # When song finishes, play next song in queue
    return None

  # Share a playlist via link ***
  def share_pl(pl):
  # Update playlist record
    return None


'''
#Methods that send songs to the database 
class DataBase:
  # Method that sends songs to song table in database
  def addSongs(name, artist, duration, id):
    addSong = "INSERT INTO Song (Name, Artist, Duration, song_ID) VALUES (%s, %s, %s, %s)"
    song = (name, artist, duration, id)
    cursor.execute(addSong,song)

  # Store list of all avalible accounts ***
  def addAccounts(username, password):
    addAccount = "INSERT INTO User (Username, Password) VALUES (%s, %s)"
    account = (username, password)
    cursor.execute(addAccount, account)

  # Store list of all public playlists ***
  def addPlaylists(name):
    addPlaylist = "INSERT INTO User (Name) VALUES (%s)"
    playlist = (name)
    cursor.execute(addPlaylist, playlist)

  #All getters and setters for the DataBase
  def getSongName(name, id):
    val = (name, id)
    command = "SELECT Name FROM Song WHERE Name = '%s' AND song_ID = '%s';"
    songName = cursor.execute(command, val)
    return songName
  
  def getSongArtist(artist, id):
    val = (artist, id)
    command = "SELECT Artist FROM Song WHERE Artist = '%s' AND song_ID = '%s';"
    songArtist = cursor.execute(command, val)
    return songArtist
  
  def getSongDuration(duration, id):
    val = (command, id)
    command = "SELECT Name FROM Song WHERE Name = '%s' AND song_ID = '%s';"
    songDuration = cursor.execte(command, val)
    return songDuration
  
  def getPlaylistName(name, id):
    val = (name, id)
    command = "SELECT Name FROM Playlist WHERE Name = '%s' AND playlist_ID = '%s';"
    playlistName = cursor.execute(command, val)
    return playlistName
  
  def getPlaylistLength(length, id):
    val = (length, id)
    command = "SELECT Length FROM Playlist WHERE Length = '%s' AND playlist_ID = '%s';"
    playlistLength = cursor.execute(command, val)
    return playlistLength
  
  def getPlaylistDuration(duration, id):
    val = (duration, id)
    command = "SELECT Duration FROM Playlist WHERE Duration = '%s' AND playlist_ID = '%s';"
    playlistLength = cursor.execute(command, val)
    return playlistLength
  
  def getAccountName(name, id):
    val = (name, id)
    command = "SELECT Username FROM User WHERE Username = '%s';"
    accountName = cursor.execute(command, val)
    return accountName

  def getAccountID(name):
    val = (name)
    command = "SELECT user_ID FROM User WHERE Username = '%s';"
    accountID = cursor.execute(command, val)
    return accountID

  def sendFriendRequest(usernameOne, usernameTwo):
    val = (usernameOne.getAccountID, usernameTwo.getAccountID)
    command = "INSERT INTO FriendRequest (user_ID, friend_ID) VALUES (%s, %s)"
    cursor.execute(command, val)

  def getFriendRequest(username):
    command = "SELECT * FROM FriendRequest WHERE user_ID = '%s';"
    requestList = cursor.execute(command, username.getAccountID)
    return requestList

  def addFriend(usernameOne, usernameTwo, acceptance):
    val = (usernameOne.getAccountID, usernameTwo.getAccountID)
    if acceptance == True :
      command = "UPDATE FriendRequest SET Added = 1; INSERT INTO Friends (user_ID, friend_ID) VALUES (%s, %s);"
      cursor.execute(command)
    else :
      command = "DELETE FROM FreindRequest WHERE user_ID = '%s' AND friend_ID = '%s';"
      cursor.execute(command,val)

  def getFriends(self):
    command = "SELECT * FROM Friends WHERE user_ID = '%s';"
    friendList = cursor.execute(command , self.getAccountID)
    return friendList
'''

   
if __name__ == "__main__":

  #TESTING PLAYLIST METHODS
  my_pl = MusicPlaylist("Playlist 1")

  search = input("What song would you like to add to the playlist? ")
  query = my_pl.search_song(search)
  #returns list of tuples containing the top 10 search results for the given song name
  print(query)
  selection = input("which index would you like to add to the playlist? ")
  #add the desired search result to the playlist
  my_pl.add_song(query[int(selection)])

  my_pl.display_songs()
  print(my_pl.length)
  print(my_pl.duration)

  search = input("What song would you like to add to the playlist? ")
  query = my_pl.search_song(search)
  #returns list of tuples containing the top 10 search results for the given song name
  print(query)
  selection = input("which index would you like to add to the playlist? ")
  #add the desired search result to the playlist
  my_pl.add_song(query[int(selection)])

  my_pl.display_songs()
  print(my_pl.length)
  print(my_pl.duration)