# -*- coding: utf-8 -*-
"""CS 3560 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XU82rU2cKDygnliFh_PdQhfFHIL63xVj
"""

import os
import random

# Note: methods are not all compilable, *** is used to note the methods/use cases that need work

class Song:
  def create_song(Name, Artist, Duration, Genre): #genre used for recommendations
    songName = Name
    songArtist = Artist
    songDuration = Duration
    songGenre = Genre

class FriendRequest:
  def create_friend_request(Sender, Recipient):
      sender = Sender
      recipient = Recipient


class Account:
  # Method to create an account ***
  def create_account(Name, Email):
    username = Name
    password = input("Please enter a password for your account: ")
    password2 = input("Confirm password: ")
    if (password == password2):
      user_password = password
    return username

  pl_songs = []
  friendlist = []

  # Sending a friend request ***
  def send_fr(username):
    if username: # If username exists in system
      # -> Send accept_fr to other user

  # Responding to a friend request ***
  def accept_fr():
    response = input("X has sent you a friend request: Would you like to accept or decline?")
    if (response == "Accept"):
      friendlist.append(username)
      return "You and user are now friends"
    else:
      return "You have declined the request"

  # Create subclass of music playlist for an account
  class MusicPlaylist:
    # Method to create a playlist ***
    def create_playlist(playlist_name):
      pl = playlist_name
      pl_songs = []
      pl_accessible = True
      return pl

    def addSong(song):
      pl_songs.append(song)
      return("Song has been successfully added to playlist")

    # Defining a search bar ***
    def search_bar():
      search = input()

    # Play a song ***
    def play(song):
      # Insert media player to play a song

    # Pause a song ***
    def pause(song):
      # Insert media player to pause a song

    # Skip a song ***
    def skip(song):
      # Insert media player to skip a song

    # Shuffle playlist ***
    def shuffle(pl):
      random.shuffle(pl)

    # Automatically play the next song (temporal event) ***
    def play_next(pl):
      # When song finishes, play next song in queue

    # Share a playlist via link ***
    def share_pl(pl)
      # Update playlist record

    # Change playlist accessibility ***
    def accessibility(pl):
      # Set playlist as either public or private


# A record of all the available searches in the system
class DataBase:
  # Method that saves a catalog of music in system***
  def songs():
    # A list of all avalible songs

  # Store list of all avalible accounts ***
  def accounts():
    # Defined list of created accounts in system

  # Store list of all public playlists ***
  def playlists():
    # List of all public playlists in system (searchable by name, genre, etc.)