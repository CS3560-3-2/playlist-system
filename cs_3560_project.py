# -*- coding: utf-8 -*-
"""CS 3560 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XU82rU2cKDygnliFh_PdQhfFHIL63xVj
"""

import os
import random
from api import getSong, playSong, ms_to_mins_secs

# Note: methods are not all compilable, *** is used to note the methods/use cases that need work

class Song:
  def __init__(self, name, artist, duration, song_id): #genre used for recommendations
    self._song_id = song_id
    self._song_name = name
    self._song_artist = artist
    self._song_duration = duration
  
  @property
  def song_id(self):
    return self._song_id
  
  @property
  def song_name(self):
    return self._song_name
  
  @property
  def song_artist(self):
    return self._song_artist
  
  @property
  def song_duration(self):
    return ms_to_mins_secs(int(self._song_duration))
  
  def __str__(self):
    return self._song_name

class MusicPlaylist:
  # Method to create a playlist ***
  def __init__(self, playlist_name):
    self._songs = []
    self._playlist_name = playlist_name
    self._length = 0
    self._duration = 0

  @property
  def songs(self):
    return self._songs

  @property
  def playlist_name(self):
    return self._playlist_name
    
  @playlist_name.setter
  def playlist_name(self, value):
    self._playlist_name = value

  @property
  def length(self):
    return self._length
    
  @length.setter
  def length(self, value):
    self._length = value

  @property
  def duration(self):
    return ms_to_mins_secs(self._duration)
    
  @duration.setter
  def playlist_name(self, value):
    self._duration = value

  def add_song(self, song):
    new_song = Song(song[1], song[2], song[3], song[0])
    self._songs.append(new_song)
    self._length = self._length + 1
    self._duration = self._duration + song[3]

  def search_song(self, name):
    search = getSong(name)
    return search

  def display_songs(self):
    for song in self.songs:
      print(song)

  #CONTINUE HERE ON 4/23
  # Play a song ***
  def play(song):
  # Insert media player to play a song
    return None

  # Pause a song ***
  def pause(song):
    # Insert media player to pause a song
    return None

  # Skip a song ***
  def skip(song):
    # Insert media player to skip a song
    return None

  # Shuffle playlist ***
  def shuffle(pl):
    random.shuffle(pl)

  # Automatically play the next song (temporal event) ***
  def play_next(pl):
    # When song finishes, play next song in queue
    return None

  # Share a playlist via link ***
  def share_pl(pl):
  # Update playlist record
    return None
  
class FriendRequest:
  def __init__(self, sender, recipient):
      sender = Sender
      recipient = Recipient

class Account:
  # Method to create an account ***
  def __init__(self, userid, password):
    self._userid = userid
    self._password = password
    self._friend_list = []
    self._playlists = []

  # Sending a friend request ***
  def send_fr(username):
    if username: # If username exists in system
      # -> Send accept_fr to other 
      return None

  # Responding to a friend request ***
  def accept_fr():
    response = input("X has sent you a friend request: Would you like to accept or decline?")
    if (response == "Accept"):
      friendlist.append(username)
      return "You and user are now friends"
    else:
      return "You have declined the request"

# A record of all the available searches in the system
class DataBase:
  # Method that saves a catalog of music in system***
  def songs():
    # A list of all avalible songs
    return None

  # Store list of all avalible accounts ***
  def accounts():
    # Defined list of created accounts in system
    return None

  # Store list of all public playlists ***
  def playlists():
    # List of all public playlists in system (searchable by name, genre, etc.)
    return None
  
if __name__ == "__main__":

  #TESTING PLAYLIST METHODS
  my_pl = MusicPlaylist("Playlist 1")

  search = input("What song would you like to add to the playlist? ")
  query = my_pl.search_song(search)
  #returns list of tuples containing the top 10 search results for the given song name
  print(query)
  selection = input("which index would you like to add to the playlist? ")
  #add the desired search result to the playlist
  my_pl.add_song(query[int(selection)])

  my_pl.display_songs()
  print(my_pl.length)
  print(my_pl.duration)